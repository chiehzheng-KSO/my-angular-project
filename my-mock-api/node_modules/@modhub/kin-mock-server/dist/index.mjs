var f=(e=>typeof require<"u"?require:typeof Proxy<"u"?new Proxy(e,{get:(r,n)=>(typeof require<"u"?require:r)[n]}):e)(function(e){if(typeof require<"u")return require.apply(this,arguments);throw Error('Dynamic require of "'+e+'" is not supported')});import{kebabCase as y}from"lodash-es";var p={PORT:process.env.PORT?parseInt(process.env.PORT):3e3,mockFilePath:"X--mock-server--filepath"};function m(e,r=""){let n="<ul>";for(let t in e)if("urlPattern"in e[t]){let o=e[t],a=o.disabled?"opacity: 0.5; cursor:not-allowed":"";o.debugUrl=`${r}${o.urlPattern}`;let i=o.debugUrl.replace(/\/\//g,"/");n+=`
        <li style='${a}'>
          <span style="text-transform: uppercase">${o.method??"get"} </span> 
          <a href="${i}">${y(t)}</a>
        </li>
      `}else n+=`
        <li>
          <strong>${t}: </strong>
          ${m(e[t],`${r}/${t}`)}
        </li>
      `;return n+="</ul>",n}var d=(e=1e3)=>new Promise(r=>setTimeout(r,e));import P from"express";import R from"body-parser";import g from"cors";import x from"path";var s=P();s.disable("x-powered-by");s.use(R.urlencoded({extended:!1}));s.use(R.json());var h={origin:!0,credentials:!0};s.use(g(h));s.options("*",g(h));s.use((e,r,n)=>{e.mockProfile=e.headers["mock-profile"]||"development",n()});var k=e=>{s.get("/",(r,n)=>{let t=m(e);n.status(200).send(`
      <h1>Mock Server Documentation</h1>
      <p>This is the mock server. Please help create any missing routes.</p>
      ${t}
    `)})};function u(e,r){Object.entries(e).forEach(([n,t])=>{if("urlPattern"in t){let o=t;if(o?.disabled)return;s[o.method??"get"](o.urlPattern,async(a,i)=>{i.setHeader(p.mockFilePath,o.mockFnPath),(o?.delay??0)>0&&await d(o?.delay);try{let c=x.resolve(r,o.mockFnPath);i.setHeader(p.mockFilePath,c);let l=await(await import(c))?.mockFn?.(a,i)??Error(`MockPathError: ${o.mockFnPath}: Mock should export const mockFn: MockFn<> = () => {}`);if(l instanceof Error)throw l;i.json(l)}catch(c){i.status(500).json({error:c?.message,errorCode:"MOCK_SERVER_ERROR"})}})}else{u(t,r);return}})}import F from"path";function G(e,r=__dirname){console.log("basePath",r);let n=r??F.dirname(f.main?.filename||process.cwd());return{start:({port:t=p.PORT,host:o="localhost"})=>{p.PORT=t,k(e),u(e,n),s.listen(t,o,()=>{console.log("Server running at PORT: ",t)}).on("error",a=>{throw new Error(a.message)})}}}export{p as CONFIG,G as createMockServer,d as delay};
