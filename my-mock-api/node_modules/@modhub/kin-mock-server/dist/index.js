"use strict";var D=Object.create;var m=Object.defineProperty;var v=Object.getOwnPropertyDescriptor;var T=Object.getOwnPropertyNames;var O=Object.getPrototypeOf,$=Object.prototype.hasOwnProperty;var M=(e,t)=>{for(var r in t)m(e,r,{get:t[r],enumerable:!0})},k=(e,t,r,n)=>{if(t&&typeof t=="object"||typeof t=="function")for(let o of T(t))!$.call(e,o)&&o!==r&&m(e,o,{get:()=>t[o],enumerable:!(n=v(t,o))||n.enumerable});return e};var c=(e,t,r)=>(r=e!=null?D(O(e)):{},k(t||!e||!e.__esModule?m(r,"default",{value:e,enumerable:!0}):r,e)),w=e=>k(m({},"__esModule",{value:!0}),e);var q={};M(q,{CONFIG:()=>p,createMockServer:()=>A,delay:()=>d});module.exports=w(q);var y=require("lodash-es"),p={PORT:process.env.PORT?parseInt(process.env.PORT):3e3,mockFilePath:"X--mock-server--filepath"};function f(e,t=""){let r="<ul>";for(let n in e)if("urlPattern"in e[n]){let o=e[n],a=o.disabled?"opacity: 0.5; cursor:not-allowed":"";o.debugUrl=`${t}${o.urlPattern}`;let i=o.debugUrl.replace(/\/\//g,"/");r+=`
        <li style='${a}'>
          <span style="text-transform: uppercase">${o.method??"get"} </span> 
          <a href="${i}">${(0,y.kebabCase)(n)}</a>
        </li>
      `}else r+=`
        <li>
          <strong>${n}: </strong>
          ${f(e[n],`${t}/${n}`)}
        </li>
      `;return r+="</ul>",r}var d=(e=1e3)=>new Promise(t=>setTimeout(t,e));var P=c(require("express")),R=c(require("body-parser"));var g=c(require("cors")),x=c(require("path")),s=(0,P.default)();s.disable("x-powered-by");s.use(R.default.urlencoded({extended:!1}));s.use(R.default.json());var F={origin:!0,credentials:!0};s.use((0,g.default)(F));s.options("*",(0,g.default)(F));s.use((e,t,r)=>{e.mockProfile=e.headers["mock-profile"]||"development",r()});var E=e=>{s.get("/",(t,r)=>{let n=f(e);r.status(200).send(`
      <h1>Mock Server Documentation</h1>
      <p>This is the mock server. Please help create any missing routes.</p>
      ${n}
    `)})};function h(e,t){Object.entries(e).forEach(([r,n])=>{if("urlPattern"in n){let o=n;if(o?.disabled)return;s[o.method??"get"](o.urlPattern,async(a,i)=>{i.setHeader(p.mockFilePath,o.mockFnPath),(o?.delay??0)>0&&await d(o?.delay);try{let l=x.default.resolve(t,o.mockFnPath);i.setHeader(p.mockFilePath,l);let u=await(await import(l))?.mockFn?.(a,i)??Error(`MockPathError: ${o.mockFnPath}: Mock should export const mockFn: MockFn<> = () => {}`);if(u instanceof Error)throw u;i.json(u)}catch(l){i.status(500).json({error:l?.message,errorCode:"MOCK_SERVER_ERROR"})}})}else{h(n,t);return}})}var b=c(require("path"));function A(e,t=__dirname){console.log("basePath",t);let r=t??b.default.dirname(require.main?.filename||process.cwd());return{start:({port:n=p.PORT,host:o="localhost"})=>{p.PORT=n,E(e),h(e,r),s.listen(n,o,()=>{console.log("Server running at PORT: ",n)}).on("error",a=>{throw new Error(a.message)})}}}0&&(module.exports={CONFIG,createMockServer,delay});
