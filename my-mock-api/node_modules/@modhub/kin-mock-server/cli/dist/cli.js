#!/usr/bin/env node
"use strict";var h=Object.create;var f=Object.defineProperty;var y=Object.getOwnPropertyDescriptor;var S=Object.getOwnPropertyNames;var x=Object.getPrototypeOf,N=Object.prototype.hasOwnProperty;var F=(e,o,n,i)=>{if(o&&typeof o=="object"||typeof o=="function")for(let c of S(o))!N.call(e,c)&&c!==n&&f(e,c,{get:()=>o[c],enumerable:!(i=y(o,c))||i.enumerable});return e};var p=(e,o,n)=>(n=e!=null?h(x(e)):{},F(o||!e||!e.__esModule?f(n,"default",{value:e,enumerable:!0}):n,e));var k=p(require("inquirer")),r=p(require("fs")),s=p(require("path")),m=process.argv[2];(!m||m==="--help"||m==="-h")&&(console.log(`
Usage: kin-mock-server-cli <command>

Commands:
  init [folder-name]    Initialize a new mock server project
  help                  Show this help message

Examples:
  kin-mock-server-cli init
  kin-mock-server-cli init my-mock-server
  `),process.exit(0));async function w(){if(m==="init"){let e=process.argv[3]||".";await b(e)}else console.error(`Unknown command: ${m}`),console.log("Run kin-mock-server-cli --help for usage information"),process.exit(1)}async function b(e){let{_folderName:o,_portNumber:n}=await k.default.prompt([{type:"input",name:"_folderName",message:"Enter folder name for mock server configuration:",default:e},{type:"input",name:"_portNumber",message:"Enter the port number for the mock server (default: 3000):",default:"3000",validate:t=>{if(!t.trim())return!0;let l=parseInt(t);return isNaN(l)||l<1||l>65535?"Please enter a valid port number (1-65535)":!0},filter:t=>t.trim()===""?"3000":t}]),i=j(o),c=parseInt(n),a=s.default.join(process.cwd(),i),u=s.default.join(a,"mock-fn");if(r.default.existsSync(a)){console.error(`Folder ${i} already exists.`);return}r.default.mkdirSync(a,{recursive:!0}),r.default.mkdirSync(u,{recursive:!0});let d="1.0.0";try{let t=require.resolve("@modhub/kin-mock-server/package.json");d=JSON.parse(r.default.readFileSync(t,"utf-8")).version}catch{console.log("Using default version 1.0.0")}let g={name:i,version:"1.0.0",description:"Mock server project",main:"routes.ts",type:"module",scripts:{start:"tsx watch routes.ts"},dependencies:{"@modhub/kin-mock-server":`^${d}`},devDependencies:{tsx:"^4.19.0",typescript:"^5.5.4"}};r.default.writeFileSync(s.default.join(a,"package.json"),JSON.stringify(g,null,2)),r.default.writeFileSync(s.default.join(a,"routes.ts"),`import { createMockServer, type ApiDef, type EndpointDefinition } from '@modhub/kin-mock-server';
import path from 'node:path';
import { fileURLToPath } from 'node:url';

const __dirname = path.dirname(fileURLToPath(import.meta.url));

const routes: ApiDef = {
  // Example route configuration
  example: {
    urlPattern: '/api/example',
    mockFnPath: './mock-fn/example.mock.ts',
    delay: 200,
    disabled: false
  }
};

export const mockServer = createMockServer(routes, __dirname).start({ port: 3000 });`),r.default.writeFileSync(s.default.join(u,"example.mock.ts"),`import { MockFn } from '@modhub/kin-mock-server';

export const mockFn: MockFn<any, { data: { message: string }}> = () => ({
  data: {
    message: 'Hello from mock server!'
  }
});`);let v={compilerOptions:{target:"ES2020",module:"ESNext",moduleResolution:"node",esModuleInterop:!0,strict:!0,skipLibCheck:!0,forceConsistentCasingInFileNames:!0},include:["**/*.ts"],exclude:["node_modules"]};r.default.writeFileSync(s.default.join(a,"tsconfig.json"),JSON.stringify(v,null,2)),console.log("Successfully initialized mock server configuration!"),console.log(`
Next steps:
1. cd ${i}
2. npm install
3. npm start
  `)}w();function j(e){return e=e.replace(/^\s+|\s+$/g,""),e=e.toLowerCase(),e=e.replace(/[^a-z0-9 -]/g,"").replace(/\s+/g,"-").replace(/-+/g,"-"),e}
